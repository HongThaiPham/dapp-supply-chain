import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import ItemManager from "../artifacts/contracts/ItemManager.sol/ItemManager.json";
import { useEffect, useState } from "react";
import { ethers } from "ethers";

export default function Home() {
  const [cost, setCost] = useState(0);
  const [itemName, setItemName] = useState("");
  const [loaded, setLoaded] = useState(false);
  const [itemManagerContract, setItemManagerContract] = useState();
  const [account, setAccount] = useState();
  // request access to the user's MetaMask account
  async function requestAccount() {
    await window.ethereum.request({ method: "eth_requestAccounts" });
  }

  async function init() {
    try {
      if (typeof window.ethereum !== "undefined") {
        await requestAccount();
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner();

        setAccount(await signer.getAddress());
        const contract = new ethers.Contract(
          "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          ItemManager.abi,
          signer
        );
        console.log(contract);

        contract.on("SupplyChainStep", async (_itemIndex, _step, _address) => {
          console.log({ _itemIndex, _step, _address });
          // console.log(ethers.utils.isAddress(_address));
          // console.log(_itemIndex.toNumber());
          // console.log(_step.toNumber());
          if (_step.toNumber() == 1) {
            const xxx = await contract.items(_itemIndex);

            alert("Item " + xxx._identifier + " was paid, deliver it now!");
          }
        });
        setItemManagerContract(contract);

        setLoaded(true);
      }
    } catch (error) {
      alert(
        `Failed to load web3, accounts, or contract. Check console for details.`
      );
      console.error(error);
    }
  }

  useEffect(() => {
    init();
  }, []);

  const handleSubmit = async () => {
    // console.log(itemName, cost, itemManagerContract);
    let result = await itemManagerContract.createItem(
      itemName,
      ethers.utils.parseEther(cost)
    );
    console.log(result);
    // alert(
    //   "Send " +
    //     cost +
    //     " Wei to " +
    //     result.events.SupplyChainStep.returnValues._address
    // );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Supply Chain App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!loaded ? (
          <div>Loading Web3, accounts, and contract...</div>
        ) : (
          <div className="App">
            <h1>Simply Payment/Supply Chain Example!</h1>
            <h2>Items</h2>
            <h2>Add Element</h2>
            Cost:{" "}
            <input
              type="text"
              name="cost"
              value={cost}
              onChange={(e) => setCost(e.target.value)}
            />
            Item Name:{" "}
            <input
              type="text"
              name="itemName"
              value={itemName}
              onChange={(e) => setItemName(e.target.value)}
            />
            <button type="button" onClick={handleSubmit}>
              Create new Item
            </button>
          </div>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
